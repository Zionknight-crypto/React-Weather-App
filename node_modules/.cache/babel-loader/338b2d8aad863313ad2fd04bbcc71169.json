{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\poeti\\\\WebD\\\\webdev-2019\\\\React\\\\new-weather-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Main from './Components/Main/Main';\nimport Footer from './Components/Footer/Footer';\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      country: '',\n      localtime: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n}\nexport default App;\n/*\n// What is state and props?\n// State - stored data in an initial state and can be updated or set at any time.\n// Props - A data carrier from parent to child elements.\nconst Count = props => {\n  return (\n  <div>\n  <h1>{props.count}</h1>\n  <button onClick={props.addOne}>Add one</button>\n  </div>)\n} \n\nconst Feedback = ( { feedback } ) => <p>{feedback}</p> \n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    console.log('I am from the constructor')\n\n    this.state = {\n      countries: [],\n      index: 0,\n      currentName: '',\n      names: ['one','two','three','four'],\n      count: 0\n    }\n  }\n\n  componentDidMount() {\n    const url = 'https://restcountries.eu/rest/v2/all'\n    fetch(url)\n    .then(response=>response.json())\n    .then(data => {\n      this.setState({\n        countries: data,\n        count: 0,\n        currentName: '',\n        names: ['one','two','three','four']\n      })\n      console.log(data)\n    })\n    console.log('component mounted')\n  }\n\ncomponentDidUpdate(prevProps,prevState) {\n  console.log('prev Props: ', prevProps, 'prev State: ', prevState)\n  console.log('I am coming from the update')\n  let index = Math.floor(Math.random() * this.state.names.length)\n  this.setState({ name: this.state.names[index]})\n  let currentName = this.state.names[index]\n}\n\nshouldComponentUpdate(nextProps, nextState) {\n  console.log('Next state from should update: ', nextState)\n\nif(nextState.currentName === 'three') {\n  return false\n}\n  // if(nextState.count < 11) {\n  //   return true\n  // }\nreturn true \n}\n\n\naddOne = () => {\n  this.setState({count: this.state.count + 1}) \n}\n  render () {\n    console.log('I am from render')\n    return (\n      <div className=\"app__container\">\n        <h1>React Life Cycle</h1>\n        <h2>Countries:{this.state.countries.length}</h2> To show the initial state of counrties []\n        <Count count={this.state.count} addOne={this.addOne} /> \n        {\n          this.state.count >= 10 ? <Feedback feedback='You only get 10 chances. Sorry buddy!' /> : ''\n        }\n        <h1>{this.state.currentName}</h1>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n*/","map":{"version":3,"sources":["C:/Users/poeti/WebD/webdev-2019/React/new-weather-app/src/App.js"],"names":["React","Component","Header","Main","Footer","App","constructor","props","state","city","country","localtime","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAKA,OAAO,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AACjCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACE,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,SAAS,EAAC;AAHC,KAAb;AAMH;;AAIDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAnBgC;AAsBnC,eAAeP,GAAf;AAGA","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header'\nimport Main from './Components/Main/Main'\nimport Footer from './Components/Footer/Footer'\n\n\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n      this.state = {\n        city: '',\n        country: '',\n        localtime:''\n      }\n\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n/*\n// What is state and props?\n// State - stored data in an initial state and can be updated or set at any time.\n// Props - A data carrier from parent to child elements.\nconst Count = props => {\n  return (\n  <div>\n  <h1>{props.count}</h1>\n  <button onClick={props.addOne}>Add one</button>\n  </div>)\n} \n\nconst Feedback = ( { feedback } ) => <p>{feedback}</p> \n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    console.log('I am from the constructor')\n\n    this.state = {\n      countries: [],\n      index: 0,\n      currentName: '',\n      names: ['one','two','three','four'],\n      count: 0\n    }\n  }\n\n  componentDidMount() {\n    const url = 'https://restcountries.eu/rest/v2/all'\n    fetch(url)\n    .then(response=>response.json())\n    .then(data => {\n      this.setState({\n        countries: data,\n        count: 0,\n        currentName: '',\n        names: ['one','two','three','four']\n      })\n      console.log(data)\n    })\n    console.log('component mounted')\n  }\n\ncomponentDidUpdate(prevProps,prevState) {\n  console.log('prev Props: ', prevProps, 'prev State: ', prevState)\n  console.log('I am coming from the update')\n  let index = Math.floor(Math.random() * this.state.names.length)\n  this.setState({ name: this.state.names[index]})\n  let currentName = this.state.names[index]\n}\n\nshouldComponentUpdate(nextProps, nextState) {\n  console.log('Next state from should update: ', nextState)\n\nif(nextState.currentName === 'three') {\n  return false\n}\n  // if(nextState.count < 11) {\n  //   return true\n  // }\nreturn true \n}\n\n\naddOne = () => {\n  this.setState({count: this.state.count + 1}) \n}\n  render () {\n    console.log('I am from render')\n    return (\n      <div className=\"app__container\">\n        <h1>React Life Cycle</h1>\n        <h2>Countries:{this.state.countries.length}</h2> To show the initial state of counrties []\n        <Count count={this.state.count} addOne={this.addOne} /> \n        {\n          this.state.count >= 10 ? <Feedback feedback='You only get 10 chances. Sorry buddy!' /> : ''\n        }\n        <h1>{this.state.currentName}</h1>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n*/\n"]},"metadata":{},"sourceType":"module"}